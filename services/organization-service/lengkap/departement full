// =======================
// File: DTOs/Department/CreateDepartmentRequest.cs
// =======================

namespace OrganizationService.DTOs.Department;

public class CreateDepartmentRequest
{
    public Guid CompanyId { get; set; }
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
}

public class UpdateDepartmentRequest
{
    public string? Name { get; set; }
    public string? Description { get; set; }
}

public class DepartmentResponse
{
    public Guid Id { get; set; }
    public Guid CompanyId { get; set; }
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
    public bool IsActive { get; set; }
    public DateTime CreatedAt { get; set; }
    public string? CreatedBy { get; set; }
    public DateTime? ChangedAt { get; set; }
    public string? ChangedBy { get; set; }
}

public class DepartmentFilterRequest : PaginationFilter
{
    public string? Name { get; set; }
    public Guid? CompanyId { get; set; }
    public bool? IsActive { get; set; }
}

// =======================
// File: Models/Department.cs
// =======================

namespace OrganizationService.Models;

public class Department : BaseEntity
{
    public Guid CompanyId { get; set; }
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
    public Company Company { get; set; } = default!;
}

// =======================
// File: Services/Interfaces/IDepartmentService.cs
// =======================

namespace OrganizationService.Services.Interfaces;

public interface IDepartmentService
{
    Task<DepartmentResponse> CreateAsync(CreateDepartmentRequest request, string currentUser);
    Task<DepartmentResponse?> GetByIdAsync(Guid id);
    Task<PaginatedResponse<DepartmentResponse>> GetFilteredAsync(DepartmentFilterRequest filter);
}

// =======================
// File: Services/Implementations/DepartmentService.cs
// =======================

namespace OrganizationService.Services.Implementations;

public class DepartmentService : IDepartmentService
{
    private readonly CompanyDbContext _context;
    private readonly IMapper _mapper;

    public DepartmentService(CompanyDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async Task<DepartmentResponse> CreateAsync(CreateDepartmentRequest request, string currentUser)
    {
        var entity = _mapper.Map<Department>(request);
        entity.CreatedAt = DateTime.UtcNow;
        entity.CreatedBy = currentUser;
        entity.IsActive = true;

        _context.Departments.Add(entity);
        await _context.SaveChangesAsync();

        return _mapper.Map<DepartmentResponse>(entity);
    }

    public async Task<DepartmentResponse?> GetByIdAsync(Guid id)
    {
        var entity = await _context.Departments.Include(x => x.Company).FirstOrDefaultAsync(x => x.Id == id);
        return entity == null ? null : _mapper.Map<DepartmentResponse>(entity);
    }

    public async Task<PaginatedResponse<DepartmentResponse>> GetFilteredAsync(DepartmentFilterRequest filter)
    {
        var query = _context.Departments.AsQueryable();

        if (!string.IsNullOrEmpty(filter.Name))
            query = query.Where(x => x.Name.Contains(filter.Name));
        if (filter.CompanyId.HasValue)
            query = query.Where(x => x.CompanyId == filter.CompanyId);
        if (filter.IsActive.HasValue)
            query = query.Where(x => x.IsActive == filter.IsActive);

        var totalCount = await query.CountAsync();
        var data = await query.Skip((filter.Page - 1) * filter.PageSize)
                               .Take(filter.PageSize)
                               .ToListAsync();

        var mapped = _mapper.Map<List<DepartmentResponse>>(data);
        return new PaginatedResponse<DepartmentResponse>(mapped, totalCount, filter.Page, filter.PageSize);
    }
}

// =======================
// File: Controllers/DepartmentsController.cs
// =======================

namespace OrganizationService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class DepartmentsController : ControllerBase
{
    private readonly IDepartmentService _service;

    public DepartmentsController(IDepartmentService service)
    {
        _service = service;
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateDepartmentRequest request)
    {
        var result = await _service.CreateAsync(request, "system");
        return Ok(ApiResponse<DepartmentResponse>.SuccessResponse(result));
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(Guid id)
    {
        var result = await _service.GetByIdAsync(id);
        if (result == null) return NotFound(ApiResponse<string>.Fail("Not found"));
        return Ok(ApiResponse<DepartmentResponse>.SuccessResponse(result));
    }

    [HttpGet]
    public async Task<IActionResult> GetFiltered([FromQuery] DepartmentFilterRequest filter)
    {
        var result = await _service.GetFilteredAsync(filter);
        return Ok(ApiResponse<PaginatedResponse<DepartmentResponse>>.SuccessResponse(result));
    }
}

// =======================
// File: Mapping/DepartmentProfile.cs
// =======================

namespace OrganizationService.Mapping;

public class DepartmentProfile : Profile
{
    public DepartmentProfile()
    {
        CreateMap<CreateDepartmentRequest, Department>();
        CreateMap<Department, DepartmentResponse>();
    }
}

// =======================
// File: Validation/DepartmentValidator.cs
// =======================

namespace OrganizationService.Validation;

public class CreateDepartmentValidator : AbstractValidator<CreateDepartmentRequest>
{
    public CreateDepartmentValidator()
    {
        RuleFor(x => x.CompanyId).NotEmpty();
        RuleFor(x => x.Name).NotEmpty().MaximumLength(100);
    }
}

public class UpdateDepartmentValidator : AbstractValidator<UpdateDepartmentRequest>
{
    public UpdateDepartmentValidator()
    {
        RuleFor(x => x.Name).MaximumLength(100);
    }
}
