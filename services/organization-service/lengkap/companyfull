// =======================
// Company DTOs
// =======================

namespace OrganizationService.DTOs.Company;

public class CreateCompanyRequest
{
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
    public string? Address { get; set; }
}

public class UpdateCompanyRequest
{
    public string? Name { get; set; }
    public string? Description { get; set; }
    public string? Address { get; set; }
}

public class CompanyResponse
{
    public Guid Id { get; set; }
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
    public string? Address { get; set; }
    public bool IsActive { get; set; }
    public DateTime CreatedAt { get; set; }
    public string? CreatedBy { get; set; }
    public DateTime? ChangedAt { get; set; }
    public string? ChangedBy { get; set; }
}

public class CompanyFilterRequest : PaginationFilter
{
    public string? Name { get; set; }
    public bool? IsActive { get; set; }
    public DateTime? CreatedAfter { get; set; }
    public DateTime? CreatedBefore { get; set; }
}

// =======================
// Company Model
// =======================

namespace OrganizationService.Models;

public class Company : BaseEntity
{
    public string Name { get; set; } = default!;
    public string? Description { get; set; }
    public string? Address { get; set; }
}

// =======================
// Company Service Interface
// =======================

namespace OrganizationService.Services.Interfaces;

public interface ICompanyService
{
    Task<CompanyResponse> CreateAsync(CreateCompanyRequest request, string currentUser);
    Task<CompanyResponse?> GetByIdAsync(Guid id);
    Task<PaginatedResponse<CompanyResponse>> GetFilteredAsync(CompanyFilterRequest filter);
}

// =======================
// Company Service Implementation
// =======================

namespace OrganizationService.Services.Implementations;

public class CompanyService : ICompanyService
{
    private readonly CompanyDbContext _context;
    private readonly IMapper _mapper;

    public CompanyService(CompanyDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async Task<CompanyResponse> CreateAsync(CreateCompanyRequest request, string currentUser)
    {
        var entity = _mapper.Map<Company>(request);
        entity.CreatedAt = DateTime.UtcNow;
        entity.CreatedBy = currentUser;
        entity.IsActive = true;

        _context.Companies.Add(entity);
        await _context.SaveChangesAsync();

        return _mapper.Map<CompanyResponse>(entity);
    }

    public async Task<CompanyResponse?> GetByIdAsync(Guid id)
    {
        var entity = await _context.Companies.FindAsync(id);
        return entity == null ? null : _mapper.Map<CompanyResponse>(entity);
    }

    public async Task<PaginatedResponse<CompanyResponse>> GetFilteredAsync(CompanyFilterRequest filter)
    {
        var query = _context.Companies.AsQueryable();

        if (!string.IsNullOrEmpty(filter.Name))
            query = query.Where(x => x.Name.Contains(filter.Name));
        if (filter.CreatedAfter.HasValue)
            query = query.Where(x => x.CreatedAt >= filter.CreatedAfter);
        if (filter.CreatedBefore.HasValue)
            query = query.Where(x => x.CreatedAt <= filter.CreatedBefore);
        if (filter.IsActive.HasValue)
            query = query.Where(x => x.IsActive == filter.IsActive);

        var totalCount = await query.CountAsync();
        var data = await query.Skip((filter.Page - 1) * filter.PageSize)
                               .Take(filter.PageSize)
                               .ToListAsync();

        var mapped = _mapper.Map<List<CompanyResponse>>(data);
        return new PaginatedResponse<CompanyResponse>(mapped, totalCount, filter.Page, filter.PageSize);
    }
}

// =======================
// Company Controller
// =======================

namespace OrganizationService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class CompaniesController : ControllerBase
{
    private readonly ICompanyService _service;

    public CompaniesController(ICompanyService service)
    {
        _service = service;
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateCompanyRequest request)
    {
        var result = await _service.CreateAsync(request, "system");
        return Ok(ApiResponse<CompanyResponse>.SuccessResponse(result));
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(Guid id)
    {
        var result = await _service.GetByIdAsync(id);
        if (result == null) return NotFound(ApiResponse<string>.Fail("Not found"));
        return Ok(ApiResponse<CompanyResponse>.SuccessResponse(result));
    }

    [HttpGet]
    public async Task<IActionResult> GetFiltered([FromQuery] CompanyFilterRequest filter)
    {
        var result = await _service.GetFilteredAsync(filter);
        return Ok(ApiResponse<PaginatedResponse<CompanyResponse>>.SuccessResponse(result));
    }
}

// =======================
// Company Mapping Profile
// =======================

namespace OrganizationService.Mapping;

public class CompanyProfile : Profile
{
    public CompanyProfile()
    {
        CreateMap<CreateCompanyRequest, Company>();
        CreateMap<Company, CompanyResponse>();
    }
}

// =======================
// Company Validator
// =======================

namespace OrganizationService.Validation;

public class CreateCompanyValidator : AbstractValidator<CreateCompanyRequest>
{
    public CreateCompanyValidator()
    {
        RuleFor(x => x.Name).NotEmpty().MaximumLength(100);
    }
}

public class UpdateCompanyValidator : AbstractValidator<UpdateCompanyRequest>
{
    public UpdateCompanyValidator()
    {
        RuleFor(x => x.Name).MaximumLength(100);
    }
}
