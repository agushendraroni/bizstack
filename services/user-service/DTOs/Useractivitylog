// =======================
// UserProfile DTOs
// =======================

using AutoMapper;
using FluentValidation;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SharedLibrary.DTOs;
using UserService.DTOs.UserProfile;
using UserService.DTOs.UserPreference;
using UserService.DTOs.UserActivityLog;
using UserService.Models;
using UserService.Services.Interfaces;

// ... (UserProfile and UserPreference sections omitted for brevity)

// =======================
// UserActivityLog DTOs
// =======================

namespace UserService.DTOs.UserActivityLog;

public class CreateUserActivityLogRequest
{
    public Guid UserId { get; set; }
    public string Activity { get; set; } = default!;
    public string? Metadata { get; set; }
}

public class UpdateUserActivityLogRequest
{
    public string? Activity { get; set; }
    public string? Metadata { get; set; }
}

public class UserActivityLogResponse
{
    public Guid Id { get; set; }
    public Guid UserId { get; set; }
    public string Activity { get; set; } = default!;
    public string? Metadata { get; set; }
    public DateTime CreatedAt { get; set; }
    public string? CreatedBy { get; set; }
}

public class UserActivityLogFilterRequest : PaginationFilter
{
    public Guid? UserId { get; set; }
    public string? Activity { get; set; }
    public bool? IsActive { get; set; }
    public DateTime? CreatedAfter { get; set; }
    public DateTime? CreatedBefore { get; set; }
}

// =======================
// UserActivityLog Service Interface
// =======================

namespace UserService.Services.Interfaces;

public interface IUserActivityLogService
{
    Task<UserActivityLogResponse> CreateAsync(CreateUserActivityLogRequest request, string currentUser);
    Task<UserActivityLogResponse?> GetByIdAsync(Guid id);
    Task<PaginatedResponse<UserActivityLogResponse>> GetFilteredAsync(UserActivityLogFilterRequest filter);
}

// =======================
// UserActivityLog Service Implementation
// =======================

namespace UserService.Services.Implementations;

public class UserActivityLogService : IUserActivityLogService
{
    private readonly UserDbContext _context;
    private readonly IMapper _mapper;

    public UserActivityLogService(UserDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async Task<UserActivityLogResponse> CreateAsync(CreateUserActivityLogRequest request, string currentUser)
    {
        var entity = _mapper.Map<UserActivityLog>(request);
        entity.CreatedAt = DateTime.UtcNow;
        entity.CreatedBy = currentUser;
        entity.IsActive = true;

        _context.UserActivityLogs.Add(entity);
        await _context.SaveChangesAsync();

        return _mapper.Map<UserActivityLogResponse>(entity);
    }

    public async Task<UserActivityLogResponse?> GetByIdAsync(Guid id)
    {
        var entity = await _context.UserActivityLogs.FindAsync(id);
        return entity == null ? null : _mapper.Map<UserActivityLogResponse>(entity);
    }

    public async Task<PaginatedResponse<UserActivityLogResponse>> GetFilteredAsync(UserActivityLogFilterRequest filter)
    {
        var query = _context.UserActivityLogs.AsQueryable();

        if (filter.UserId.HasValue)
            query = query.Where(x => x.UserId == filter.UserId);
        if (!string.IsNullOrEmpty(filter.Activity))
            query = query.Where(x => x.Activity.Contains(filter.Activity));
        if (filter.CreatedAfter.HasValue)
            query = query.Where(x => x.CreatedAt >= filter.CreatedAfter);
        if (filter.CreatedBefore.HasValue)
            query = query.Where(x => x.CreatedAt <= filter.CreatedBefore);
        if (filter.IsActive.HasValue)
            query = query.Where(x => x.IsActive == filter.IsActive);

        var totalCount = await query.CountAsync();
        var data = await query.Skip((filter.Page - 1) * filter.PageSize)
                               .Take(filter.PageSize)
                               .ToListAsync();

        var mapped = _mapper.Map<List<UserActivityLogResponse>>(data);
        return new PaginatedResponse<UserActivityLogResponse>(mapped, totalCount, filter.Page, filter.PageSize);
    }
}

// =======================
// UserActivityLog Controller
// =======================

namespace UserService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UserActivityLogsController : ControllerBase
{
    private readonly IUserActivityLogService _service;

    public UserActivityLogsController(IUserActivityLogService service)
    {
        _service = service;
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateUserActivityLogRequest request)
    {
        var result = await _service.CreateAsync(request, "system");
        return Ok(ApiResponse<UserActivityLogResponse>.SuccessResponse(result));
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(Guid id)
    {
        var result = await _service.GetByIdAsync(id);
        if (result == null) return NotFound(ApiResponse<string>.Fail("Not found"));
        return Ok(ApiResponse<UserActivityLogResponse>.SuccessResponse(result));
    }

    [HttpGet]
    public async Task<IActionResult> GetFiltered([FromQuery] UserActivityLogFilterRequest filter)
    {
        var result = await _service.GetFilteredAsync(filter);
        return Ok(ApiResponse<PaginatedResponse<UserActivityLogResponse>>.SuccessResponse(result));
    }
}

// =======================
// UserActivityLog Mapping Profile
// =======================

namespace UserService.Mapping;

public class UserActivityLogProfile : Profile
{
    public UserActivityLogProfile()
    {
        CreateMap<CreateUserActivityLogRequest, UserActivityLog>();
        CreateMap<UserActivityLog, UserActivityLogResponse>();
    }
}

// =======================
// UserActivityLog Validator
// =======================

namespace UserService.Validation;

public class CreateUserActivityLogValidator : AbstractValidator<CreateUserActivityLogRequest>
{
    public CreateUserActivityLogValidator()
    {
        RuleFor(x => x.UserId).NotEmpty();
        RuleFor(x => x.Activity).NotEmpty().MaximumLength(100);
    }
}

public class UpdateUserActivityLogValidator : AbstractValidator<UpdateUserActivityLogRequest>
{
    public UpdateUserActivityLogValidator()
    {
        RuleFor(x => x.Activity).MaximumLength(100);
    }
}
