// =======================
// UserPreference DTOs
// =======================

namespace UserService.DTOs.UserPreference;

public class CreateUserPreferenceRequest
{
    public Guid UserId { get; set; }
    public string Language { get; set; } = default!;
    public string Theme { get; set; } = default!;
    public bool ReceiveNotifications { get; set; }
}

public class UpdateUserPreferenceRequest
{
    public string? Language { get; set; }
    public string? Theme { get; set; }
    public bool? ReceiveNotifications { get; set; }
}

public class UserPreferenceResponse
{
    public Guid Id { get; set; }
    public Guid UserId { get; set; }
    public string Language { get; set; } = default!;
    public string Theme { get; set; } = default!;
    public bool ReceiveNotifications { get; set; }
    public DateTime CreatedAt { get; set; }
    public string? CreatedBy { get; set; }
    public DateTime? ChangedAt { get; set; }
    public string? ChangedBy { get; set; }
}

public class UserPreferenceFilterRequest : PaginationFilter
{
    public string? Language { get; set; }
    public string? Theme { get; set; }
    public bool? ReceiveNotifications { get; set; }
    public bool? IsActive { get; set; }
}

// =======================
// UserPreference Service Interface
// =======================

namespace UserService.Services.Interfaces;

public interface IUserPreferenceService
{
    Task<UserPreferenceResponse> CreateAsync(CreateUserPreferenceRequest request, string currentUser);
    Task<UserPreferenceResponse> UpdateAsync(Guid id, UpdateUserPreferenceRequest request, string currentUser);
    Task<UserPreferenceResponse?> GetByIdAsync(Guid id);
    Task<PaginatedResponse<UserPreferenceResponse>> GetFilteredAsync(UserPreferenceFilterRequest filter);
    Task<bool> DeleteAsync(Guid id);
}

// =======================
// UserPreference Service Implementation
// =======================

namespace UserService.Services.Implementations;

public class UserPreferenceService : IUserPreferenceService
{
    private readonly UserDbContext _context;
    private readonly IMapper _mapper;

    public UserPreferenceService(UserDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async Task<UserPreferenceResponse> CreateAsync(CreateUserPreferenceRequest request, string currentUser)
    {
        var entity = _mapper.Map<UserPreference>(request);
        entity.CreatedAt = DateTime.UtcNow;
        entity.CreatedBy = currentUser;
        entity.IsActive = true;

        _context.UserPreferences.Add(entity);
        await _context.SaveChangesAsync();

        return _mapper.Map<UserPreferenceResponse>(entity);
    }

    public async Task<UserPreferenceResponse> UpdateAsync(Guid id, UpdateUserPreferenceRequest request, string currentUser)
    {
        var entity = await _context.UserPreferences.FindAsync(id);
        if (entity == null) throw new KeyNotFoundException("UserPreference not found");

        _mapper.Map(request, entity);
        entity.ChangedAt = DateTime.UtcNow;
        entity.ChangedBy = currentUser;

        await _context.SaveChangesAsync();
        return _mapper.Map<UserPreferenceResponse>(entity);
    }

    public async Task<UserPreferenceResponse?> GetByIdAsync(Guid id)
    {
        var entity = await _context.UserPreferences.FindAsync(id);
        return entity == null ? null : _mapper.Map<UserPreferenceResponse>(entity);
    }

    public async Task<PaginatedResponse<UserPreferenceResponse>> GetFilteredAsync(UserPreferenceFilterRequest filter)
    {
        var query = _context.UserPreferences.AsQueryable();

        if (!string.IsNullOrEmpty(filter.Language))
            query = query.Where(x => x.Language.Contains(filter.Language));
        if (!string.IsNullOrEmpty(filter.Theme))
            query = query.Where(x => x.Theme.Contains(filter.Theme));
        if (filter.ReceiveNotifications.HasValue)
            query = query.Where(x => x.ReceiveNotifications == filter.ReceiveNotifications);
        if (filter.IsActive.HasValue)
            query = query.Where(x => x.IsActive == filter.IsActive);

        var totalCount = await query.CountAsync();
        var data = await query.Skip((filter.Page - 1) * filter.PageSize)
                               .Take(filter.PageSize)
                               .ToListAsync();

        var mapped = _mapper.Map<List<UserPreferenceResponse>>(data);
        return new PaginatedResponse<UserPreferenceResponse>(mapped, totalCount, filter.Page, filter.PageSize);
    }

    public async Task<bool> DeleteAsync(Guid id)
    {
        var entity = await _context.UserPreferences.FindAsync(id);
        if (entity == null) return false;

        entity.IsActive = false;
        entity.ChangedAt = DateTime.UtcNow;

        await _context.SaveChangesAsync();
        return true;
    }
}

// =======================
// UserPreference Controller
// =======================

namespace UserService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UserPreferencesController : ControllerBase
{
    private readonly IUserPreferenceService _service;

    public UserPreferencesController(IUserPreferenceService service)
    {
        _service = service;
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateUserPreferenceRequest request)
    {
        var result = await _service.CreateAsync(request, "system");
        return Ok(ApiResponse<UserPreferenceResponse>.SuccessResponse(result));
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(Guid id, [FromBody] UpdateUserPreferenceRequest request)
    {
        var result = await _service.UpdateAsync(id, request, "system");
        return Ok(ApiResponse<UserPreferenceResponse>.SuccessResponse(result));
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(Guid id)
    {
        var result = await _service.GetByIdAsync(id);
        if (result == null) return NotFound(ApiResponse<string>.Fail("Not found"));
        return Ok(ApiResponse<UserPreferenceResponse>.SuccessResponse(result));
    }

    [HttpGet]
    public async Task<IActionResult> GetFiltered([FromQuery] UserPreferenceFilterRequest filter)
    {
        var result = await _service.GetFilteredAsync(filter);
        return Ok(ApiResponse<PaginatedResponse<UserPreferenceResponse>>.SuccessResponse(result));
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(Guid id)
    {
        var success = await _service.DeleteAsync(id);
        if (!success) return NotFound(ApiResponse<string>.Fail("Not found"));
        return Ok(ApiResponse<string>.SuccessResponse("Deleted"));
    }
}

// =======================
// UserPreference Mapping Profile
// =======================

namespace UserService.Mapping;

public class UserPreferenceProfile : Profile
{
    public UserPreferenceProfile()
    {
        CreateMap<CreateUserPreferenceRequest, UserPreference>();
        CreateMap<UpdateUserPreferenceRequest, UserPreference>();
        CreateMap<UserPreference, UserPreferenceResponse>();
    }
}

// =======================
// UserPreference Validator
// =======================

namespace UserService.Validation;

public class CreateUserPreferenceValidator : AbstractValidator<CreateUserPreferenceRequest>
{
    public CreateUserPreferenceValidator()
    {
        RuleFor(x => x.UserId).NotEmpty();
        RuleFor(x => x.Language).NotEmpty().MaximumLength(20);
        RuleFor(x => x.Theme).NotEmpty().MaximumLength(20);
    }
}

public class UpdateUserPreferenceValidator : AbstractValidator<UpdateUserPreferenceRequest>
{
    public UpdateUserPreferenceValidator()
    {
        RuleFor(x => x.Language).MaximumLength(20);
        RuleFor(x => x.Theme).MaximumLength(20);
    }
}
