// =======================
// UserProfile DTOs
// =======================

using AutoMapper;
using FluentValidation;
using Microsoft.AspNetCore.Mvc;
using SharedLibrary.DTOs;
using UserService.DTOs.UserProfile;
using UserService.Models;
using UserService.Services.Interfaces;

namespace UserService.DTOs.UserProfile;

public class CreateUserProfileRequest
{
    public Guid UserId { get; set; }
    public string FullName { get; set; } = default!;
    public string PhoneNumber { get; set; } = default!;
    public string Address { get; set; } = default!;
}

public class UpdateUserProfileRequest
{
    public string? FullName { get; set; }
    public string? PhoneNumber { get; set; }
    public string? Address { get; set; }
}

public class UserProfileResponse
{
    public Guid Id { get; set; }
    public Guid UserId { get; set; }
    public string FullName { get; set; } = default!;
    public string PhoneNumber { get; set; } = default!;
    public string Address { get; set; } = default!;
    public DateTime CreatedAt { get; set; }
    public string? CreatedBy { get; set; }
    public DateTime? ChangedAt { get; set; }
    public string? ChangedBy { get; set; }
}

public class UserProfileFilterRequest : PaginationFilter
{
    public string? FullName { get; set; }
    public string? PhoneNumber { get; set; }
    public DateTime? CreatedAfter { get; set; }
    public DateTime? CreatedBefore { get; set; }
    public bool? IsActive { get; set; }
}

public interface IUserProfileService
{
    Task<UserProfileResponse> CreateAsync(CreateUserProfileRequest request);
    Task<UserProfileResponse> UpdateAsync(Guid id, UpdateUserProfileRequest request);
    Task<bool> DeleteAsync(Guid id);
    Task<UserProfileResponse> GetByIdAsync(Guid id);
    Task<PaginatedResponse<UserProfileResponse>> GetFilteredAsync(UserProfileFilterRequest filter);
}

public class UserProfileService : IUserProfileService
{
    private readonly IMapper _mapper;
    private readonly OrganizationDbContext _dbContext;

    public UserProfileService(IMapper mapper, OrganizationDbContext dbContext)
    {
        _mapper = mapper;
        _dbContext = dbContext;
    }

    public async Task<UserProfileResponse> CreateAsync(CreateUserProfileRequest request)
    {
        var entity = _mapper.Map<UserProfile>(request);
        _dbContext.UserProfiles.Add(entity);
        await _dbContext.SaveChangesAsync();
        return _mapper.Map<UserProfileResponse>(entity);
    }

    public async Task<UserProfileResponse> UpdateAsync(Guid id, UpdateUserProfileRequest request)
    {
        var entity = await _dbContext.UserProfiles.FindAsync(id);
        if (entity == null) throw new Exception("UserProfile not found");

        _mapper.Map(request, entity);
        await _dbContext.SaveChangesAsync();
        return _mapper.Map<UserProfileResponse>(entity);
    }

    public async Task<bool> DeleteAsync(Guid id)
    {
        var entity = await _dbContext.UserProfiles.FindAsync(id);
        if (entity == null) return false;

        _dbContext.UserProfiles.Remove(entity);
        await _dbContext.SaveChangesAsync();
        return true;
    }

    public async Task<UserProfileResponse> GetByIdAsync(Guid id)
    {
        var entity = await _dbContext.UserProfiles.FindAsync(id);
        return _mapper.Map<UserProfileResponse>(entity);
    }

    public async Task<PaginatedResponse<UserProfileResponse>> GetFilteredAsync(UserProfileFilterRequest filter)
    {
        var query = _dbContext.UserProfiles.AsQueryable();

        if (!string.IsNullOrEmpty(filter.FullName))
            query = query.Where(x => x.FullName.Contains(filter.FullName));

        if (!string.IsNullOrEmpty(filter.PhoneNumber))
            query = query.Where(x => x.PhoneNumber.Contains(filter.PhoneNumber));

        if (filter.CreatedAfter.HasValue)
            query = query.Where(x => x.CreatedAt >= filter.CreatedAfter);

        if (filter.CreatedBefore.HasValue)
            query = query.Where(x => x.CreatedAt <= filter.CreatedBefore);

        if (filter.IsActive.HasValue)
            query = query.Where(x => x.IsActive == filter.IsActive);

        var total = await query.CountAsync();

        var data = await query
            .Skip((filter.Page - 1) * filter.PageSize)
            .Take(filter.PageSize)
            .ToListAsync();

        return new PaginatedResponse<UserProfileResponse>(
            _mapper.Map<List<UserProfileResponse>>(data), total, filter.Page, filter.PageSize);
    }
}

public class CreateUserProfileRequestValidator : AbstractValidator<CreateUserProfileRequest>
{
    public CreateUserProfileRequestValidator()
    {
        RuleFor(x => x.FullName).NotEmpty().MaximumLength(100);
        RuleFor(x => x.PhoneNumber).NotEmpty().MaximumLength(20);
        RuleFor(x => x.Address).NotEmpty();
    }
}

public class UpdateUserProfileRequestValidator : AbstractValidator<UpdateUserProfileRequest>
{
    public UpdateUserProfileRequestValidator()
    {
        RuleFor(x => x.FullName).MaximumLength(100);
        RuleFor(x => x.PhoneNumber).MaximumLength(20);
    }
}

public class UserProfileProfile : Profile
{
    public UserProfileProfile()
    {
        CreateMap<CreateUserProfileRequest, UserProfile>();
        CreateMap<UpdateUserProfileRequest, UserProfile>();
        CreateMap<UserProfile, UserProfileResponse>();
    }
}

[ApiController]
[Route("api/[controller]")]
public class UserProfileController : ControllerBase
{
    private readonly IUserProfileService _service;

    public UserProfileController(IUserProfileService service)
    {
        _service = service;
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateUserProfileRequest request)
    {
        var result = await _service.CreateAsync(request);
        return Ok(ApiResponse<UserProfileResponse>.SuccessResponse(result));
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(Guid id, [FromBody] UpdateUserProfileRequest request)
    {
        var result = await _service.UpdateAsync(id, request);
        return Ok(ApiResponse<UserProfileResponse>.SuccessResponse(result));
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(Guid id)
    {
        var success = await _service.DeleteAsync(id);
        return Ok(ApiResponse<bool>.SuccessResponse(success));
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(Guid id)
    {
        var result = await _service.GetByIdAsync(id);
        return Ok(ApiResponse<UserProfileResponse>.SuccessResponse(result));
    }

    [HttpGet]
    public async Task<IActionResult> GetFiltered([FromQuery] UserProfileFilterRequest filter)
    {
        var result = await _service.GetFilteredAsync(filter);
        return Ok(ApiResponse<PaginatedResponse<UserProfileResponse>>.SuccessResponse(result));
    }
}
